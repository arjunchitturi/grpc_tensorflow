// This file is @generated by prost-build.
/// Specifies one or more fully independent input Examples.
/// See examples at:
///      <https://github.com/tensorflow/tensorflow/blob/master/example.proto>
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExampleList {
    #[prost(message, repeated, tag = "1")]
    pub examples: ::prost::alloc::vec::Vec<super::Example>,
}
/// Specifies one or more independent input Examples, with a common context
/// Example.
///
/// The common use case for context is to cleanly and optimally specify some
/// features that are common across multiple examples.
///
/// See example below with a search query as the context and multiple restaurants
/// to perform some inference on.
///
/// context: {
///    features: {
///      feature: {
///        key  : "query"
///        value: {
///          bytes_list: {
///            value: \[ "pizza" \]
///          }
///        }
///      }
///    }
/// }
/// examples: {
///    features: {
///      feature: {
///        key  : "cuisine"
///        value: {
///          bytes_list: {
///            value: \[ "Pizzeria" \]
///          }
///        }
///      }
///    }
/// }
/// examples: {
///    features: {
///      feature: {
///        key  : "cuisine"
///        value: {
///          bytes_list: {
///            value: \[ "Taqueria" \]
///          }
///        }
///      }
///    }
/// }
///
/// Implementations of ExampleListWithContext merge the context Example into each
/// of the Examples. Note that feature keys must not be duplicated between the
/// Examples and context Example, or the behavior is undefined.
///
/// See also:
///      example.proto
///      <https://developers.google.com/protocol-buffers/docs/proto3#maps>
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExampleListWithContext {
    #[prost(message, repeated, tag = "1")]
    pub examples: ::prost::alloc::vec::Vec<super::Example>,
    #[prost(message, optional, tag = "2")]
    pub context: ::core::option::Option<super::Example>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Input {
    #[prost(oneof = "input::Kind", tags = "1, 2")]
    pub kind: ::core::option::Option<input::Kind>,
}
/// Nested message and enum types in `Input`.
pub mod input {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kind {
        #[prost(message, tag = "1")]
        ExampleList(super::ExampleList),
        #[prost(message, tag = "2")]
        ExampleListWithContext(super::ExampleListWithContext),
    }
}
/// Metadata for an inference request such as the model name and version.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModelSpec {
    /// Required servable name.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// A named signature to evaluate. If unspecified, the default signature will
    /// be used.
    #[prost(string, tag = "3")]
    pub signature_name: ::prost::alloc::string::String,
    /// Optional choice of which version of the model to use.
    ///
    /// Expected to be left unset in the common case. Should be specified when
    /// there is a strong version consistency requirement (e.g. when the model
    /// signature changes across versions and requests need to be
    /// version-specific).
    ///
    /// When left unspecified, the system will serve the best available version.
    /// This is typically the latest version, though during version transitions,
    /// notably when serving on a fleet of instances, may be either the previous or
    /// new version.
    #[prost(oneof = "model_spec::VersionChoice", tags = "2, 4")]
    pub version_choice: ::core::option::Option<model_spec::VersionChoice>,
}
/// Nested message and enum types in `ModelSpec`.
pub mod model_spec {
    /// Optional choice of which version of the model to use.
    ///
    /// Expected to be left unset in the common case. Should be specified when
    /// there is a strong version consistency requirement (e.g. when the model
    /// signature changes across versions and requests need to be
    /// version-specific).
    ///
    /// When left unspecified, the system will serve the best available version.
    /// This is typically the latest version, though during version transitions,
    /// notably when serving on a fleet of instances, may be either the previous or
    /// new version.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum VersionChoice {
        /// Use this specific version number.
        #[prost(message, tag = "2")]
        Version(i64),
        /// Use the version associated with the given label.
        #[prost(string, tag = "4")]
        VersionLabel(::prost::alloc::string::String),
    }
}
/// Regression result for a single item (tensorflow.Example).
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Regression {
    #[prost(float, tag = "1")]
    pub value: f32,
}
/// Contains one result per input example, in the same order as the input in
/// RegressionRequest.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegressionResult {
    #[prost(message, repeated, tag = "1")]
    pub regressions: ::prost::alloc::vec::Vec<Regression>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegressionRequest {
    /// Model Specification. If version is not specified, will use the latest
    /// (numerical) version.
    #[prost(message, optional, tag = "1")]
    pub model_spec: ::core::option::Option<ModelSpec>,
    /// Input data.
    #[prost(message, optional, tag = "2")]
    pub input: ::core::option::Option<Input>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegressionResponse {
    /// Effective Model Specification used for regression.
    #[prost(message, optional, tag = "2")]
    pub model_spec: ::core::option::Option<ModelSpec>,
    #[prost(message, optional, tag = "1")]
    pub result: ::core::option::Option<RegressionResult>,
}
/// PredictRequest specifies which TensorFlow model to run, as well as
/// how inputs are mapped to tensors and how outputs are filtered before
/// returning to user.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PredictRequest {
    /// Model Specification. If version is not specified, will use the latest
    /// (numerical) version.
    #[prost(message, optional, tag = "1")]
    pub model_spec: ::core::option::Option<ModelSpec>,
    /// Input tensors.
    /// Names of input tensor are alias names. The mapping from aliases to real
    /// input tensor names is stored in the SavedModel export as a prediction
    /// SignatureDef under the 'inputs' field.
    #[prost(map = "string, message", tag = "2")]
    pub inputs: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        super::TensorProto,
    >,
    /// Output filter.
    /// Names specified are alias names. The mapping from aliases to real output
    /// tensor names is stored in the SavedModel export as a prediction
    /// SignatureDef under the 'outputs' field.
    /// Only tensors specified here will be run/fetched and returned, with the
    /// exception that when none is specified, all tensors specified in the
    /// named signature will be run/fetched and returned.
    #[prost(string, repeated, tag = "3")]
    pub output_filter: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Options for streaming requests to control how multiple requests/responses
    /// are handled within a single stream.
    #[prost(message, optional, tag = "5")]
    pub predict_streamed_options: ::core::option::Option<PredictStreamedOptions>,
    /// Client identifier to group requests belonging to a specific entity.
    /// Example entities can be product ids, service names, user ids etc.
    /// Servers can use this to optimize placement, caching and colocation.
    /// TODO(b/329897437): Migrate to client_id in RequestOptions.
    #[prost(bytes = "vec", optional, tag = "6")]
    pub client_id: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(message, optional, tag = "7")]
    pub request_options: ::core::option::Option<predict_request::RequestOptions>,
}
/// Nested message and enum types in `PredictRequest`.
pub mod predict_request {
    /// Options for PredictRequest.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct RequestOptions {
        /// Client identifier to group requests belonging to a specific entity.
        /// Example entities can be product ids, service names, user ids etc.
        /// Servers can use this to optimize placement, caching and colocation.
        #[prost(bytes = "vec", optional, tag = "1")]
        pub client_id: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
        #[prost(enumeration = "request_options::DeterministicMode", optional, tag = "2")]
        pub deterministic_mode: ::core::option::Option<i32>,
    }
    /// Nested message and enum types in `RequestOptions`.
    pub mod request_options {
        /// Deterministic mode for the request. When specified, model servers will
        /// reduce numeric instability based on different mode selections.
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum DeterministicMode {
            Unspecified = 0,
            /// Only supported in disaggregated serving. When set, the request will be
            /// pinned to a fixed decoder slot index that's deterministic across
            /// processes.
            FixedDecoderSlot = 1,
        }
        impl DeterministicMode {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    Self::Unspecified => "DETERMINISTIC_MODE_UNSPECIFIED",
                    Self::FixedDecoderSlot => "FIXED_DECODER_SLOT",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "DETERMINISTIC_MODE_UNSPECIFIED" => Some(Self::Unspecified),
                    "FIXED_DECODER_SLOT" => Some(Self::FixedDecoderSlot),
                    _ => None,
                }
            }
        }
    }
}
/// Options only used for streaming requests that control how inputs/ouputs are
/// handled in the stream.
///
/// Request state used to handle splitting of requests.  NONE is the
/// default when the stream request is not split.
///
/// SPLIT is used when multiple streamed requests are used to generate a
/// logical request. END_SPLIT should be called for the last split of the
/// logical request. NONE can not be interspersed with SPLIT before END_SPLIT
/// is called. If another request is sent on the same
/// stream after END_SPLIT, it can be any of the RequestState since a new
/// logical request has started.  If END_SPLIT is called on its own the
/// behavior is the same as NONE.
///
/// Some examples with a mix of request states and the logical request.
///
/// Example 1 :
///    SPLIT
///    SPLIT
///    END_SPLIT
///
/// Will be treated as a single logical request.
///
/// Example 2:
///    NONE
///    END_SPLIT
///    NONE
///
/// Will be treated as three logical requests (1. NONE 2. END_SPLIT, 3. NONE)
///
/// Example 3:
///    SPLIT
///    SPLIT
///
/// Invalid because END_SPLIT is never call.
///
/// Example 4:
///    SPLIT
///    NONE
///    SPLIT
///    END_SPLIT
///
/// Invalid because is interspersed with SPLIT.
///
/// Example 5:
///    SPLIT
///    END_SPLIT
///    SPLIT
///    SPLIT
///    END_SPLIT
///
/// Will be treated as two logical requests (1. SPLIT, END_SPLIT 2. SPLIT,
/// SPLIT, END_SPLIT)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PredictStreamedOptions {
    /// Request state used to handle segmentation of requests.
    #[prost(enumeration = "predict_streamed_options::RequestState", tag = "1")]
    pub request_state: i32,
    /// Input tensors split dimensions.
    /// Defines the dimension used to split input tensors specified
    /// in PredictRequest.inputs. The dimension will be used
    /// for concatenation of multiple SPLIT requests.
    ///
    /// For input tensor in PredictRequest.inputs that are not contained in this
    /// map, the tensors from the first SPLIT request will be used.
    ///
    /// For example, with an original input tensor of \[[1, 2, 3, 4\], \[5, 6, 7, 8]\].
    ///
    /// For a split dimension of 0 and two requests (SPLIT and END_SPLIT), the
    /// input tensors for request 1 should be \[1, 2, 3, 4\] and request 2 should be
    /// be \[5, 6, 7, 8\].
    ///
    /// For a split dimension of 1 and two requests (SPLIT and END_SPLIT), the
    /// input tensors for request 1 should be \[[1, 2\], \[5, 6]\] and request 2 should
    /// be \[[3, 4\], \[7, 8]\].
    #[prost(map = "string, int32", tag = "2")]
    pub split_dimensions: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        i32,
    >,
}
/// Nested message and enum types in `PredictStreamedOptions`.
pub mod predict_streamed_options {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum RequestState {
        None = 0,
        Split = 1,
        EndSplit = 2,
    }
    impl RequestState {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::None => "NONE",
                Self::Split => "SPLIT",
                Self::EndSplit => "END_SPLIT",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "NONE" => Some(Self::None),
                "SPLIT" => Some(Self::Split),
                "END_SPLIT" => Some(Self::EndSplit),
                _ => None,
            }
        }
    }
}
/// Response for PredictRequest on successful run.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PredictResponse {
    /// Effective Model Specification used to process PredictRequest.
    #[prost(message, optional, tag = "2")]
    pub model_spec: ::core::option::Option<ModelSpec>,
    /// Output tensors.
    #[prost(map = "string, message", tag = "1")]
    pub outputs: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        super::TensorProto,
    >,
}
/// A single class.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Class {
    /// Label or name of the class.
    #[prost(string, tag = "1")]
    pub label: ::prost::alloc::string::String,
    /// Score for this class (e.g., the probability the item belongs to this
    /// class). As per the proto3 default-value semantics, if the score is missing,
    /// it should be treated as 0.
    #[prost(float, tag = "2")]
    pub score: f32,
}
/// List of classes for a single item (tensorflow.Example).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Classifications {
    #[prost(message, repeated, tag = "1")]
    pub classes: ::prost::alloc::vec::Vec<Class>,
}
/// Contains one result per input example, in the same order as the input in
/// ClassificationRequest.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClassificationResult {
    #[prost(message, repeated, tag = "1")]
    pub classifications: ::prost::alloc::vec::Vec<Classifications>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClassificationRequest {
    /// Model Specification. If version is not specified, will use the latest
    /// (numerical) version.
    #[prost(message, optional, tag = "1")]
    pub model_spec: ::core::option::Option<ModelSpec>,
    /// Input data.
    #[prost(message, optional, tag = "2")]
    pub input: ::core::option::Option<Input>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClassificationResponse {
    /// Effective Model Specification used for classification.
    #[prost(message, optional, tag = "2")]
    pub model_spec: ::core::option::Option<ModelSpec>,
    /// Result of the classification.
    #[prost(message, optional, tag = "1")]
    pub result: ::core::option::Option<ClassificationResult>,
}
/// Message returned for "signature_def" field.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignatureDefMap {
    #[prost(map = "string, message", tag = "1")]
    pub signature_def: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        super::SignatureDef,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetModelMetadataRequest {
    /// Model Specification indicating which model we are querying for metadata.
    /// If version is not specified, will use the latest (numerical) version.
    #[prost(message, optional, tag = "1")]
    pub model_spec: ::core::option::Option<ModelSpec>,
    /// Metadata fields to get. Currently supported: "signature_def".
    #[prost(string, repeated, tag = "2")]
    pub metadata_field: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetModelMetadataResponse {
    /// Model Specification indicating which model this metadata belongs to.
    #[prost(message, optional, tag = "1")]
    pub model_spec: ::core::option::Option<ModelSpec>,
    /// Map of metadata field name to metadata field. The options for metadata
    /// field name are listed in GetModelMetadataRequest. Currently supported:
    /// "signature_def".
    #[prost(map = "string, message", tag = "2")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost_types::Any,
    >,
}
/// Inference request such as classification, regression, etc...
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InferenceTask {
    /// Model Specification. If version is not specified, will use the latest
    /// (numerical) version.
    /// All ModelSpecs in a MultiInferenceRequest must access the same model name.
    #[prost(message, optional, tag = "1")]
    pub model_spec: ::core::option::Option<ModelSpec>,
    /// Signature's method_name. Should be one of the method names defined in
    /// third_party/tensorflow/python/saved_model/signature_constants.py.
    /// e.g. "tensorflow/serving/classify".
    #[prost(string, tag = "2")]
    pub method_name: ::prost::alloc::string::String,
}
/// Inference result, matches the type of request or is an error.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InferenceResult {
    #[prost(message, optional, tag = "1")]
    pub model_spec: ::core::option::Option<ModelSpec>,
    #[prost(oneof = "inference_result::Result", tags = "2, 3")]
    pub result: ::core::option::Option<inference_result::Result>,
}
/// Nested message and enum types in `InferenceResult`.
pub mod inference_result {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        #[prost(message, tag = "2")]
        ClassificationResult(super::ClassificationResult),
        #[prost(message, tag = "3")]
        RegressionResult(super::RegressionResult),
    }
}
/// Inference request containing one or more requests.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiInferenceRequest {
    /// Inference tasks.
    #[prost(message, repeated, tag = "1")]
    pub tasks: ::prost::alloc::vec::Vec<InferenceTask>,
    /// Input data.
    #[prost(message, optional, tag = "2")]
    pub input: ::core::option::Option<Input>,
}
/// Inference request containing one or more responses.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiInferenceResponse {
    /// List of results; one for each InferenceTask in the request, returned in the
    /// same order as the request.
    #[prost(message, repeated, tag = "1")]
    pub results: ::prost::alloc::vec::Vec<InferenceResult>,
}
/// Generated client implementations.
pub mod prediction_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// open source marker; do not remove
    /// PredictionService provides access to machine-learned models loaded by
    /// model_servers.
    #[derive(Debug, Clone)]
    pub struct PredictionServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl PredictionServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> PredictionServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> PredictionServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            PredictionServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Classify.
        pub async fn classify(
            &mut self,
            request: impl tonic::IntoRequest<super::ClassificationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ClassificationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tensorflow.serving.PredictionService/Classify",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("tensorflow.serving.PredictionService", "Classify"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Regress.
        pub async fn regress(
            &mut self,
            request: impl tonic::IntoRequest<super::RegressionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegressionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tensorflow.serving.PredictionService/Regress",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("tensorflow.serving.PredictionService", "Regress"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Predict -- provides access to loaded TensorFlow model.
        pub async fn predict(
            &mut self,
            request: impl tonic::IntoRequest<super::PredictRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PredictResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tensorflow.serving.PredictionService/Predict",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("tensorflow.serving.PredictionService", "Predict"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// MultiInference API for multi-headed models.
        pub async fn multi_inference(
            &mut self,
            request: impl tonic::IntoRequest<super::MultiInferenceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MultiInferenceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tensorflow.serving.PredictionService/MultiInference",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "tensorflow.serving.PredictionService",
                        "MultiInference",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// GetModelMetadata - provides access to metadata for loaded models.
        pub async fn get_model_metadata(
            &mut self,
            request: impl tonic::IntoRequest<super::GetModelMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetModelMetadataResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/tensorflow.serving.PredictionService/GetModelMetadata",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "tensorflow.serving.PredictionService",
                        "GetModelMetadata",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
